<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.muggle</groupId>
    <artifactId>cloud-picture-backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>cloud-picture-backend</name>
    <description>cloud-picture-backend</description>
    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring-boot.version>2.7.6</spring-boot.version>
    </properties>
    <!-- 项目依赖配置部分，用于指定项目所需要的各种库和框架 -->
    <dependencies>
        <!-- Spring Boot Web 启动器依赖 -->
        <!-- 这个依赖包含了 Spring MVC 和嵌入式 Tomcat 等组件，用于快速构建基于 Spring 的 Web 应用程序 -->
        <!-- 它提供了处理 HTTP 请求、构建 RESTful 服务等功能所需的核心库 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot AOP 启动器依赖 -->
        <!-- AOP 是一种编程范式，它允许开发者将横切关注点（如日志记录、事务管理、安全验证等）从业务逻辑中分离出来， -->
        <!-- 引入该依赖后，开发者可以使用 @Aspect、@Before、@After 等注解来定义切面和通知，从而实现对目标方法的增强。 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!--配置元数据-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>

        <!-- Spring Session + Redis -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>


        <!-- MyBatis-Plus Spring Boot 启动器依赖 https://baomidou.com/ -->
        <!-- MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发而生。 -->
        <!-- 此依赖将 MyBatis-Plus 集成到 Spring Boot 项目中，它提供了如代码生成器、通用 CRUD 操作、分页插件等功能， -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.5.12</version>
        </dependency>

        <!-- MyBatis-Plus 分页插件-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-jsqlparser-4.9</artifactId>
        </dependency>

        <!-- MySQL 数据库连接驱动依赖 -->
        <!-- 该依赖提供了 Java 程序与 MySQL 数据库进行连接和交互的功能 -->
        <!-- scope 设置为 runtime，表示该依赖仅在运行时需要，编译时不需要 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok 依赖 -->
        <!-- Lombok 是一个 Java 库，通过注解的方式减少 Java 代码的样板代码，如 getter、setter、构造函数等 -->
        <!-- optional 设置为 true，表示该依赖是可选的，项目的其他模块可以不依赖它 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Spring Boot 测试启动器依赖 -->
        <!-- 这个依赖包含了用于测试 Spring Boot 应用程序的各种工具和库 -->
        <!-- scope 设置为 test，表示该依赖仅在测试阶段使用，编译和运行主程序时不需要 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Hutool 工具包依赖 https://doc.hutool.cn/ -->
        <!-- Hutool 是一个 Java 工具包，它封装了大量实用的工具类和方法，旨在帮助开发者更便捷地进行 Java 开发。 -->
        <!-- 涵盖了文件操作、日期处理、加密解密、网络请求、JSON 处理等众多常用功能，能显著提高开发效率，减少重复造轮子。 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.8.38</version>
        </dependency>

        <!-- Knife4j OpenAPI 2 Spring Boot 启动器依赖  https://doc.xiaominfo.com/-->
        <!-- Knife4j 是一个为 Swagger 增强的 UI 框架，主要用于为 Spring Boot 项目提供美观且功能强大的 API 文档展示。 -->
        <!-- 通过 Knife4j，前端开发人员可以直观地查看接口的详细信息，如接口地址、请求参数、返回参数等，方便前后端的交互和调试。 -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>
            <version>4.4.0</version>
        </dependency>

        <!-- 腾讯云对象存储（COS）的 Java SDK，借助该 SDK 能够在 Java 项目里方便地与腾讯云对象存储服务进行交互。-->
        <dependency>
            <groupId>com.qcloud</groupId>
            <artifactId>cos_api</artifactId>
            <version>5.6.227</version>
        </dependency>

        <!-- HTML 解析：https://jsoup.org/ -->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.15.3</version>
        </dependency>

        <!-- Caffeine 是一个高性能的 Java 缓存库，提供了强大的缓存功能 -->
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
            <version>3.1.8</version>
        </dependency>

        <!-- Sa-Token 权限认证 -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-spring-boot-starter</artifactId>
            <version>1.39.0</version>
        </dependency>
        <!-- Sa-Token 整合 Redis （使用 jackson 序列化方式） -->
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-redis-jackson</artifactId>
            <version>1.39.0</version>
        </dependency>
        <!-- 提供Redis连接池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- websocket -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- 高性能无锁队列 -->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>

    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-bom</artifactId>
                <version>3.5.9</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
                    <mainClass>com.muggle.cloudpicturebackend.CloudPictureBackendApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
